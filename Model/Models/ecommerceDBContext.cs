// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Model.Models
{
    public partial class ecommerceDBContext : DbContext
    {
        public ecommerceDBContext()
        {
        }

        public ecommerceDBContext(DbContextOptions<ecommerceDBContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Products> Products { get; set; }
        public virtual DbSet<Rol> Rol { get; set; }
        public virtual DbSet<Sales> Sales { get; set; }
        public virtual DbSet<Shipping> Shipping { get; set; }
        public virtual DbSet<ShippingProducts> ShippingProducts { get; set; }
        public virtual DbSet<Users> Users { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Products>(entity =>
            {
                entity.HasKey(e => e.IdProduct);

                entity.Property(e => e.IdProduct).HasColumnName("id_product");

                entity.Property(e => e.Descriptions)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("descriptions")
                    .IsFixedLength();

                entity.Property(e => e.Price)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("price");

                entity.Property(e => e.Product)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("product")
                    .IsFixedLength();
            });

            modelBuilder.Entity<Rol>(entity =>
            {
                entity.HasKey(e => e.IdRol);

                entity.Property(e => e.IdRol).HasColumnName("id_rol");

                entity.Property(e => e.UserType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Sales>(entity =>
            {
                entity.HasKey(e => e.IdSales);

                entity.Property(e => e.IdSales).HasColumnName("id_Sales");

                entity.Property(e => e.DateSale)
                    .HasColumnType("datetime")
                    .HasColumnName("date_sale");

                entity.Property(e => e.IdUser).HasColumnName("id_user");

                entity.HasOne(d => d.IdUserNavigation)
                    .WithMany(p => p.Sales)
                    .HasForeignKey(d => d.IdUser)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Sales_Users");
            });

            modelBuilder.Entity<Shipping>(entity =>
            {
                entity.HasKey(e => e.IdShipping);

                entity.Property(e => e.IdShipping).HasColumnName("id_shipping");

                entity.Property(e => e.Destination)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("destination")
                    .IsFixedLength();

                entity.Property(e => e.IdSales).HasColumnName("id_Sales");

                entity.Property(e => e.StateEnvio)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("state_envio")
                    .IsFixedLength();

                entity.HasOne(d => d.IdSalesNavigation)
                    .WithMany(p => p.Shipping)
                    .HasForeignKey(d => d.IdSales)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Shipping_Sales");
            });

            modelBuilder.Entity<ShippingProducts>(entity =>
            {
                entity.HasKey(e => e.IdShippingProducts);

                entity.Property(e => e.IdShippingProducts).HasColumnName("id_ShippingProducts");

                entity.Property(e => e.IdProduct).HasColumnName("id_product");

                entity.Property(e => e.IdShipping).HasColumnName("id_shipping");

                entity.HasOne(d => d.IdProductNavigation)
                    .WithMany(p => p.ShippingProducts)
                    .HasForeignKey(d => d.IdProduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ShippingProducts_Products");

                entity.HasOne(d => d.IdShippingNavigation)
                    .WithMany(p => p.ShippingProducts)
                    .HasForeignKey(d => d.IdShipping)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ShippingProducts_Shipping");
            });

            modelBuilder.Entity<Users>(entity =>
            {
                entity.HasKey(e => e.IdUser);

                entity.Property(e => e.IdUser).HasColumnName("id_user");

                entity.Property(e => e.IdRol).HasColumnName("id_rol");

                entity.Property(e => e.Lastname)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("lastname")
                    .IsFixedLength();

                entity.Property(e => e.Mail)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("mail")
                    .IsFixedLength();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("name")
                    .IsFixedLength();

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("password")
                    .IsFixedLength();

                entity.HasOne(d => d.IdRolNavigation)
                    .WithMany(p => p.Users)
                    .HasForeignKey(d => d.IdRol)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Users_Rol");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}